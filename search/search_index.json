{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"jorisdevrede.github.io My personal notes on knowledge work , engineering, and architecture.","title":"jorisdevrede.github.io"},{"location":"#jorisdevredegithubio","text":"My personal notes on knowledge work , engineering, and architecture.","title":"jorisdevrede.github.io"},{"location":"architecture/","text":"Architecture architecture [ ahr-ki-tek-cher ] - the profession of designing buildings, open areas, communities, and other artificial constructions and environments, usually with some regard to aesthetic effect.","title":"Architecture"},{"location":"architecture/#architecture","text":"architecture [ ahr-ki-tek-cher ] - the profession of designing buildings, open areas, communities, and other artificial constructions and environments, usually with some regard to aesthetic effect.","title":"Architecture"},{"location":"architecture/practice/","text":"Components are only half the architecture When we think of systems architecture we usually picture a diagram with components and their relations, sometimes complemented with principles on how to structure them. Thise components are only half the architecture though. The other half consists of the people and their practices that make the components. They are equally important, but are almost never taken into account. This is like designing a car without considering the factory to actually make it. Practices should be centered around change and maintenance as systems do not run themselves. Systems require continual adaptation and maintenance to stay relevant. Like the car that needs a garage and maintenance schedule. Or maybe there is no garage in IT and it is the factory that needs to reproduce a fitting means of transportation each day. Be it a sedan, a station wagon or an SUV. All the more reason to pay attention to the architecture of the factory; to the architecture of our practices.","title":"Practice"},{"location":"architecture/practice/#components-are-only-half-the-architecture","text":"When we think of systems architecture we usually picture a diagram with components and their relations, sometimes complemented with principles on how to structure them. Thise components are only half the architecture though. The other half consists of the people and their practices that make the components. They are equally important, but are almost never taken into account. This is like designing a car without considering the factory to actually make it. Practices should be centered around change and maintenance as systems do not run themselves. Systems require continual adaptation and maintenance to stay relevant. Like the car that needs a garage and maintenance schedule. Or maybe there is no garage in IT and it is the factory that needs to reproduce a fitting means of transportation each day. Be it a sedan, a station wagon or an SUV. All the more reason to pay attention to the architecture of the factory; to the architecture of our practices.","title":"Components are only half the architecture"},{"location":"engineering/","text":"Engineering","title":"Engineering"},{"location":"engineering/#engineering","text":"","title":"Engineering"},{"location":"knowledge-work/","text":"Knowledge Work As professionals in IT, we all engage in some form of knowledge work . Are we equipped though to do this work effectively? Have we learned the necessary habits and can we perform the basic tasks with adequate speed? Just as a pianist has to practice scales and a boxer needs to train combinations, so too should we hone our skills. This section explores what it takes to be a capable knowledge worker.","title":"Knowledge Work"},{"location":"knowledge-work/#knowledge-work","text":"As professionals in IT, we all engage in some form of knowledge work . Are we equipped though to do this work effectively? Have we learned the necessary habits and can we perform the basic tasks with adequate speed? Just as a pianist has to practice scales and a boxer needs to train combinations, so too should we hone our skills. This section explores what it takes to be a capable knowledge worker.","title":"Knowledge Work"},{"location":"knowledge-work/absorption-speed/","text":"Absorption Speed Reading time: ~1 minute. Research estimates that we read around 240 words per minute (wpm) and can comfortably listen to speech at 140 wpm. We absorb information faster while reading than listening. These numbers only apply when we concentrate though. As Nicolas Carr points out in his book The Shallows , we find it increasingly difficult to focus. In an age of swiping to the next sound bite, we tend to compromise on the absorption speed of written text and settle for videos or podcasts that can keep our attention. While video has its use when learning a physical activity, it is often the slower option when taking in information. The same goes for meetings. A meeting can have its use. It can be effective for bonding socially, or for discussing emotionally loaded subjects. It is inferior to text though when exchanging facts. Then 'that meeting really should have been an e-mail'. So opt for reading over listening when you need to take in information, and write your knowledge down so others can make that choice too. All it takes is a little focus.","title":"Absorption Speed"},{"location":"knowledge-work/absorption-speed/#absorption-speed","text":"Reading time: ~1 minute. Research estimates that we read around 240 words per minute (wpm) and can comfortably listen to speech at 140 wpm. We absorb information faster while reading than listening. These numbers only apply when we concentrate though. As Nicolas Carr points out in his book The Shallows , we find it increasingly difficult to focus. In an age of swiping to the next sound bite, we tend to compromise on the absorption speed of written text and settle for videos or podcasts that can keep our attention. While video has its use when learning a physical activity, it is often the slower option when taking in information. The same goes for meetings. A meeting can have its use. It can be effective for bonding socially, or for discussing emotionally loaded subjects. It is inferior to text though when exchanging facts. Then 'that meeting really should have been an e-mail'. So opt for reading over listening when you need to take in information, and write your knowledge down so others can make that choice too. All it takes is a little focus.","title":"Absorption Speed"},{"location":"knowledge-work/taking-notes/","text":"Taking Notes Most people limit note taking to the obligatory meeting minutes. Notes can be much more useful though. Here is why. Unstructured Brains Our brains are not built for structured infomation. They can hold over a petabyte , of data, but retrieve a memory with the same context that its stored with. This can be anything. This is like trying to use Google, not knowing which exact combination of words, pictures, or even music you need to input to get the right results. The brain has a bias for recently handled memories. What is on top of mind feels more important, even if it is not. This can leave you with an inferior idea, because you thought of it more recently. Ideas are fluid, especially complex or detailed ones. Our brains are great at adapting ideas to a new context, but this can unknowingly change our standpoints ever so slightly with every meeting that we have. The adaptive quality of our brains are good for problem solving, but bad for taking a stand and staying on course. Structured Notes Notes can be more than the action items of a meeting. They can become the structured part of our brains by ordering information for easy retrieval. Applications like Keep , Obsidian , and Evernote do just that. Each applications uses a slightly different technique of tagging, structuring, and searching to fit your particular need. So try them, to see what works for you. So what exactly is a note? It is any piece of information, written in your own words, that has potential value for you in the future. This can be an idea that you thought of, the exact steps to perform a recurring task, or a detailed concept that is difficult to remember. Anything that is not easily found online, but that you still want to retrieve when you need it, without keeping it top of mind. With each note that add, your personal knowledge base becomes a google alternative that is tailored to your way of thinking. So use it. Search your notes, before consulting the internet. With time you will find the answer in your notes more often. To keep your notes useful, you have to review them periodically. This will either give interesting ideas to (re)consider, or it will surface notes that are less useful than initially thought. In the last case, do not be afraid to delete the note. This housekeeping will keep your knowledge base up to date. This can seem like a lot of extra work at first, and granted, it does take some upfront effort for your collection of notes to have value. Once you start to reap the benefits though, you will never go back. Next Steps Here are the steps to get you on your way with notes. Choose a note taking application. It doesn't really matter which one you choose as long as it is easily accessible and has both search and structuring functions to order your notes. ( No, Notepad and TextEdit are not an option. ) Add notes with detailed steps on recurring tasks. This type of note will pay itself back quickly, because you won't have to remember the exact steps and because you will definitely need it in the future. Search for the note, when you need to perform the task again. This will form the habit of searching your personal notes first and will immediately provide the positive feedback of quickly performing the steps in order with the help of your note. Add notes with ideas you had, or interesting things you read about. Make sure you keep your notes short and specific. Just one concept per note with half a page of text at most. Add a reference to what you read. Now search your notes first, before searching the internet. Perform housekeeping. Go through your notes once a month to keep them up to date.","title":"Taking Notes"},{"location":"knowledge-work/taking-notes/#taking-notes","text":"Most people limit note taking to the obligatory meeting minutes. Notes can be much more useful though. Here is why.","title":"Taking Notes"},{"location":"knowledge-work/taking-notes/#unstructured-brains","text":"Our brains are not built for structured infomation. They can hold over a petabyte , of data, but retrieve a memory with the same context that its stored with. This can be anything. This is like trying to use Google, not knowing which exact combination of words, pictures, or even music you need to input to get the right results. The brain has a bias for recently handled memories. What is on top of mind feels more important, even if it is not. This can leave you with an inferior idea, because you thought of it more recently. Ideas are fluid, especially complex or detailed ones. Our brains are great at adapting ideas to a new context, but this can unknowingly change our standpoints ever so slightly with every meeting that we have. The adaptive quality of our brains are good for problem solving, but bad for taking a stand and staying on course.","title":"Unstructured Brains"},{"location":"knowledge-work/taking-notes/#structured-notes","text":"Notes can be more than the action items of a meeting. They can become the structured part of our brains by ordering information for easy retrieval. Applications like Keep , Obsidian , and Evernote do just that. Each applications uses a slightly different technique of tagging, structuring, and searching to fit your particular need. So try them, to see what works for you. So what exactly is a note? It is any piece of information, written in your own words, that has potential value for you in the future. This can be an idea that you thought of, the exact steps to perform a recurring task, or a detailed concept that is difficult to remember. Anything that is not easily found online, but that you still want to retrieve when you need it, without keeping it top of mind. With each note that add, your personal knowledge base becomes a google alternative that is tailored to your way of thinking. So use it. Search your notes, before consulting the internet. With time you will find the answer in your notes more often. To keep your notes useful, you have to review them periodically. This will either give interesting ideas to (re)consider, or it will surface notes that are less useful than initially thought. In the last case, do not be afraid to delete the note. This housekeeping will keep your knowledge base up to date. This can seem like a lot of extra work at first, and granted, it does take some upfront effort for your collection of notes to have value. Once you start to reap the benefits though, you will never go back.","title":"Structured Notes"},{"location":"knowledge-work/taking-notes/#next-steps","text":"Here are the steps to get you on your way with notes. Choose a note taking application. It doesn't really matter which one you choose as long as it is easily accessible and has both search and structuring functions to order your notes. ( No, Notepad and TextEdit are not an option. ) Add notes with detailed steps on recurring tasks. This type of note will pay itself back quickly, because you won't have to remember the exact steps and because you will definitely need it in the future. Search for the note, when you need to perform the task again. This will form the habit of searching your personal notes first and will immediately provide the positive feedback of quickly performing the steps in order with the help of your note. Add notes with ideas you had, or interesting things you read about. Make sure you keep your notes short and specific. Just one concept per note with half a page of text at most. Add a reference to what you read. Now search your notes first, before searching the internet. Perform housekeeping. Go through your notes once a month to keep them up to date.","title":"Next Steps"},{"location":"knowledge-work/books/","text":"Books on Knowledge Work Here are interesting books on knowledge work. They cover basic techniques that every knowledge worker should master. Ahrens, S\u00f6nke. How to Take Smart Notes: One Simple Techinique to Boost Writing, Learning and Thinking. 2022. Interesting points: Create a system of one idea per note. Order those notes to develop your narrative. This makes your ideas explicit by writing them down, and lets you order those ideas across multiple sessions by committing your train of thought to paper. Forte, Tiago. Building a Second Brain: A Proven Method to Organise Your Digital life and Unlock Your Creative Potential. 2022. Interesting points: Create a result using your existing notes and ask for feedback. Lower the bar on your result, if needed, but do not collect more information. Based on the feedback, collect additional information, organize it, and distill that to a better version of the result. Repeat this cycle as needed. Newport, Cal. Deep Work: Rules for Focused Success in a Distracted World. 2016. Interesting points: Multitasking is an illusion and we need to concentrate fully on a subject without distractions to create profound results. It takes deliberate planning to create distraction free sessions, but are worth it if you want to make progress. Zinsser, William. On Writing Well: The Classic Guide to Writing Nonfiction. 2012. Interesting points: Writing well means rewriting your text into simple words and deleting unneeded ones. You write more redundant words than you think. Zinsser, William. Writing to Learn: How to Write - and Think - Clearly about Any Subject at All. 2013. Interesting points: Writing helps you think and remember.","title":"Books on Knowledge Work"},{"location":"knowledge-work/books/#books-on-knowledge-work","text":"Here are interesting books on knowledge work. They cover basic techniques that every knowledge worker should master. Ahrens, S\u00f6nke. How to Take Smart Notes: One Simple Techinique to Boost Writing, Learning and Thinking. 2022. Interesting points: Create a system of one idea per note. Order those notes to develop your narrative. This makes your ideas explicit by writing them down, and lets you order those ideas across multiple sessions by committing your train of thought to paper. Forte, Tiago. Building a Second Brain: A Proven Method to Organise Your Digital life and Unlock Your Creative Potential. 2022. Interesting points: Create a result using your existing notes and ask for feedback. Lower the bar on your result, if needed, but do not collect more information. Based on the feedback, collect additional information, organize it, and distill that to a better version of the result. Repeat this cycle as needed. Newport, Cal. Deep Work: Rules for Focused Success in a Distracted World. 2016. Interesting points: Multitasking is an illusion and we need to concentrate fully on a subject without distractions to create profound results. It takes deliberate planning to create distraction free sessions, but are worth it if you want to make progress. Zinsser, William. On Writing Well: The Classic Guide to Writing Nonfiction. 2012. Interesting points: Writing well means rewriting your text into simple words and deleting unneeded ones. You write more redundant words than you think. Zinsser, William. Writing to Learn: How to Write - and Think - Clearly about Any Subject at All. 2013. Interesting points: Writing helps you think and remember.","title":"Books on Knowledge Work"},{"location":"knowledge-work/deep-work/","text":"Deep Work We live in an \"always on\" world in which we are expected to promptly reply our e-mail, actively respond to chat messages, and be available for phone calls. This expectancy is even greater now that we are not always visibly in the office anymore. As knowledge workers, we need to concentrate to do our work. The more complex the subject, the more we need to concentrate. In order to do that, we need to be free from distractions, and that is exactly what getting more and more difficult in todays workplace.","title":"Deep Work"},{"location":"knowledge-work/deep-work/#deep-work","text":"We live in an \"always on\" world in which we are expected to promptly reply our e-mail, actively respond to chat messages, and be available for phone calls. This expectancy is even greater now that we are not always visibly in the office anymore. As knowledge workers, we need to concentrate to do our work. The more complex the subject, the more we need to concentrate. In order to do that, we need to be free from distractions, and that is exactly what getting more and more difficult in todays workplace.","title":"Deep Work"},{"location":"knowledge-work/deep-work/rules/","text":"Deep Work Rules Rules for a daily deep work schedule. Plan sessions of up to 90 minutes in your agenda for doing deep work. Plan this weekly and refine daily at set times. Define a clear output for each session in advance. Be specific about your goal. At the start of the session close all communication and distractions. Open only your reference material and your output. Put on your headphone and start supporting music. Set your phone to quiet and put it face down on the table. Close Teams, Chat and Email clients. Close Planners and Agendas. Close Windows that don't contribute to the subject. Close Notes. Open a new notepad if needed. Follow the optimal process for the given type during each session. At the end of the session open all communication channels and answer all simple and urgent requests. Stop the music. Check your phone for calls and messages. Check Teams, Chat and Email. Evaluate the ouput and process of your session.","title":"Rules"},{"location":"knowledge-work/deep-work/rules/#deep-work-rules","text":"Rules for a daily deep work schedule. Plan sessions of up to 90 minutes in your agenda for doing deep work. Plan this weekly and refine daily at set times. Define a clear output for each session in advance. Be specific about your goal. At the start of the session close all communication and distractions. Open only your reference material and your output. Put on your headphone and start supporting music. Set your phone to quiet and put it face down on the table. Close Teams, Chat and Email clients. Close Planners and Agendas. Close Windows that don't contribute to the subject. Close Notes. Open a new notepad if needed. Follow the optimal process for the given type during each session. At the end of the session open all communication channels and answer all simple and urgent requests. Stop the music. Check your phone for calls and messages. Check Teams, Chat and Email. Evaluate the ouput and process of your session.","title":"Deep Work Rules"},{"location":"knowledge-work/deep-work/types/","text":"Deep Work Types Concept (architecture) Result: The definition and structuring of concepts that form the context of design. The main input of this type of work should be function. Design Result: Diagrams with supporting descriptions and assumptions that form the basis of future builds or clarify recent new builds. A design satisfies a complex set of goals (requirements). Design requires detailed knowledge of the build options, which comes from both documentation and build experience. It might also require the knowledge of previous designs like frameworks and standards if they are available. So design work should be preceded by the search for such designs. Build Result: Automated deployment of a service or component that satisfies a clear goal. Build work requires a clear goal and optionally a design when available. Note that Build and Design form an interplay. Build work is the transformation of documentation and experience into an automated deployment. Process Result: Work instructions that are simple enough to become habits.","title":"Types"},{"location":"knowledge-work/deep-work/types/#deep-work-types","text":"","title":"Deep Work Types"},{"location":"knowledge-work/deep-work/types/#concept-architecture","text":"Result: The definition and structuring of concepts that form the context of design. The main input of this type of work should be function.","title":"Concept (architecture)"},{"location":"knowledge-work/deep-work/types/#design","text":"Result: Diagrams with supporting descriptions and assumptions that form the basis of future builds or clarify recent new builds. A design satisfies a complex set of goals (requirements). Design requires detailed knowledge of the build options, which comes from both documentation and build experience. It might also require the knowledge of previous designs like frameworks and standards if they are available. So design work should be preceded by the search for such designs.","title":"Design"},{"location":"knowledge-work/deep-work/types/#build","text":"Result: Automated deployment of a service or component that satisfies a clear goal. Build work requires a clear goal and optionally a design when available. Note that Build and Design form an interplay. Build work is the transformation of documentation and experience into an automated deployment.","title":"Build"},{"location":"knowledge-work/deep-work/types/#process","text":"Result: Work instructions that are simple enough to become habits.","title":"Process"},{"location":"systems/","text":"Systems Thinking In this section I look at subjects from 'systems' perspective, as defined by Donella Meadows in her book Thinking in Systems: A Primer . Meadows defines a system as an interplay of stocks and flows. Stocks are the elements of the system that you can see, count, or measure at any time. Flows are the actions that change a stock over time. The stock can increase through an inflow, or decrease through an outflow. A basic example is the system of a bathtub. The water in the bathtub is the stock . The stock can be increased by opening the faucet that acts as an inflow , and it can be decreased by unplugging the drain that acts as an outflow . You can make the system as complex or as simple as you need it to be, depending on what it is you are analyzing. The bathtub can have an additional outflow, for example, from the water that evaporates. Whether that extra complexity is needed in your model of the system is up to you.","title":"Systems Thinking"},{"location":"systems/#systems-thinking","text":"In this section I look at subjects from 'systems' perspective, as defined by Donella Meadows in her book Thinking in Systems: A Primer . Meadows defines a system as an interplay of stocks and flows. Stocks are the elements of the system that you can see, count, or measure at any time. Flows are the actions that change a stock over time. The stock can increase through an inflow, or decrease through an outflow. A basic example is the system of a bathtub. The water in the bathtub is the stock . The stock can be increased by opening the faucet that acts as an inflow , and it can be decreased by unplugging the drain that acts as an outflow . You can make the system as complex or as simple as you need it to be, depending on what it is you are analyzing. The bathtub can have an additional outflow, for example, from the water that evaporates. Whether that extra complexity is needed in your model of the system is up to you.","title":"Systems Thinking"},{"location":"systems/security/","text":"IT Security The focus of IT security is the protection against misuse of applications. If you view this \"Protection Against Misuse\" as a stock , then its inflows are the hardening of intended use and the patching of flaws that lead to unintended use. The outflow is the discovery of those flaws, or vulnerabilities . Hardening Taking measures to lower the attack surface of an application is called hardening. This means, for example, that you disable an administrative endpoint or limit the allowed login attempts. Both are intended functions of the application that you limit against misuse. The more you harden an application, the better it is protected against misuse. Vulnerabilities While failure to harden is also a vulnerability, we generally use the term for flaws in the code that open the application for unintended use. The discovery of these vulnerabilities lower the protection of the application. Technically the vulnerability is already there, making the \"Protection Against Misuse\" stock as low as all the still unknown vulnerabilities subtracted from it. In practice a vulnerability is only considered when it is actually discovered and can be acted upon. Additional vulnerabilities to consider are those lower in the operational stack of the application. A vulnerability in the underlying operating system, for example, could grant direct access to the application. That vulnerability then also subtracts from the protection of the application. Patching When a vulnerability is known, the application developer can fix the flaw and provide a new version of the application. Installing this new version for the purpose of removing the vulnerability is what we call patching. We should strive to always have the latest patch version of an application installed as it will provide the highest protection possible. Pentesting A penetration test, or pentest, is the feedback loop that measures the \"Protection Against Misuse\" stock by testing the hardening measures in place and the patches not in place. It can optionally be expanded to search for unknown vulnerabilities, discovering them during the test itself. This search is usually reserved for bespoke applications.","title":"Security"},{"location":"systems/security/#it-security","text":"The focus of IT security is the protection against misuse of applications. If you view this \"Protection Against Misuse\" as a stock , then its inflows are the hardening of intended use and the patching of flaws that lead to unintended use. The outflow is the discovery of those flaws, or vulnerabilities .","title":"IT Security"},{"location":"systems/security/#hardening","text":"Taking measures to lower the attack surface of an application is called hardening. This means, for example, that you disable an administrative endpoint or limit the allowed login attempts. Both are intended functions of the application that you limit against misuse. The more you harden an application, the better it is protected against misuse.","title":"Hardening"},{"location":"systems/security/#vulnerabilities","text":"While failure to harden is also a vulnerability, we generally use the term for flaws in the code that open the application for unintended use. The discovery of these vulnerabilities lower the protection of the application. Technically the vulnerability is already there, making the \"Protection Against Misuse\" stock as low as all the still unknown vulnerabilities subtracted from it. In practice a vulnerability is only considered when it is actually discovered and can be acted upon. Additional vulnerabilities to consider are those lower in the operational stack of the application. A vulnerability in the underlying operating system, for example, could grant direct access to the application. That vulnerability then also subtracts from the protection of the application.","title":"Vulnerabilities"},{"location":"systems/security/#patching","text":"When a vulnerability is known, the application developer can fix the flaw and provide a new version of the application. Installing this new version for the purpose of removing the vulnerability is what we call patching. We should strive to always have the latest patch version of an application installed as it will provide the highest protection possible.","title":"Patching"},{"location":"systems/security/#pentesting","text":"A penetration test, or pentest, is the feedback loop that measures the \"Protection Against Misuse\" stock by testing the hardening measures in place and the patches not in place. It can optionally be expanded to search for unknown vulnerabilities, discovering them during the test itself. This search is usually reserved for bespoke applications.","title":"Pentesting"},{"location":"tech/trust_tls/","text":"Trusting TLS TLS is one of the most used and least understood technologies. It secures connections, but how seems a mystery. This leaves us with statements like \"your credit card data will be stolen when you use self-signed certificates\". Nobody knows, but it sounds scary enough so it must be true. Or is it? TLS has two main functions. The first is encrypting data in transit. The second is providing trust on a public network. Encryption is the important one, but it is trust that we get worked up about. Encryption TLS encrypts TCP packets between client and server, using a key that only they know. This ensures that only the client and server can read the data they exchange. No intermediate can eavesdrop. The details are more complex, but this is the essence. Data is secured between the two parties. That is it. Fail-fast This encryption is guaranteed, because TLS is a fail-fast protocol. If the communication cannot be encrypted, it will not happen. This contrary to the browser messages saying your connection might not be safe. These messages only apply to trust and never to encryption. Trust TLS can also provide trust about the server that the client connects to. The server provides a certificate that holds the server address and is signed by a third party. The client can choose to trust the third party and its signed confirmation of the server address. Trust on the public network Trust is relevant on an untrusted network where client data can be intercepted by an intermediate system that poses as the intended server. The client can then be tricked into leaking sensitive information like password or credit card data. The trust function verifies that the server is the intended address. In an uncontrolled network it is useful to assure that data is sent to the intended recipient. In a controlled network though, this is useless at best. Here is why. Commercial CA's Trust, or more accurately \"TLS host verification\", works by first trusting the certificate of the Certificate Authority (CA) that signed the server certificate. This will let the client trust all the server certificates that the CA signs. Browsers and operating systems are preconfigured to trust a list of commercial CA's and server certificates are bought from these CA's. So because Chrome trusts a bundle of CA's and the site you are browsing has a certificate that is signed by one of those CA's, you don't have to worry about TLS. How different that is on a private network. Rolling your own Trusting a preconfigured commercial CA is no different from trusting a CA that you create yourself. It provides the same level of trust. The difference is that a certificate from your own CA is free, which makes it preferable over commercial CA's. The downside of this is that you have to configure each client to trust your CA. This configuration comes at a cost as well. That is when you should evaluate trust itself. Is there a change that a client can connect to an unverified server? If so, make the investment of configuring each client with your CA. If not, then you are better off with turning host verification off in your TLS connections. It delegates trust to your known network and leaves you with encryption. No more, no less. But my browser says When you decide that servers are known and that host verfication has no added value in your particular context, there is still your browser that screams bloody murder. That is because TLS host verfication was designed for the internet with non-technical users in mind. Just click OK and know that your connection is encrypted and safe.","title":"Trusting TLS"},{"location":"tech/trust_tls/#trusting-tls","text":"TLS is one of the most used and least understood technologies. It secures connections, but how seems a mystery. This leaves us with statements like \"your credit card data will be stolen when you use self-signed certificates\". Nobody knows, but it sounds scary enough so it must be true. Or is it? TLS has two main functions. The first is encrypting data in transit. The second is providing trust on a public network. Encryption is the important one, but it is trust that we get worked up about.","title":"Trusting TLS"},{"location":"tech/trust_tls/#encryption","text":"TLS encrypts TCP packets between client and server, using a key that only they know. This ensures that only the client and server can read the data they exchange. No intermediate can eavesdrop. The details are more complex, but this is the essence. Data is secured between the two parties. That is it.","title":"Encryption"},{"location":"tech/trust_tls/#fail-fast","text":"This encryption is guaranteed, because TLS is a fail-fast protocol. If the communication cannot be encrypted, it will not happen. This contrary to the browser messages saying your connection might not be safe. These messages only apply to trust and never to encryption.","title":"Fail-fast"},{"location":"tech/trust_tls/#trust","text":"TLS can also provide trust about the server that the client connects to. The server provides a certificate that holds the server address and is signed by a third party. The client can choose to trust the third party and its signed confirmation of the server address.","title":"Trust"},{"location":"tech/trust_tls/#trust-on-the-public-network","text":"Trust is relevant on an untrusted network where client data can be intercepted by an intermediate system that poses as the intended server. The client can then be tricked into leaking sensitive information like password or credit card data. The trust function verifies that the server is the intended address. In an uncontrolled network it is useful to assure that data is sent to the intended recipient. In a controlled network though, this is useless at best. Here is why.","title":"Trust on the public network"},{"location":"tech/trust_tls/#commercial-cas","text":"Trust, or more accurately \"TLS host verification\", works by first trusting the certificate of the Certificate Authority (CA) that signed the server certificate. This will let the client trust all the server certificates that the CA signs. Browsers and operating systems are preconfigured to trust a list of commercial CA's and server certificates are bought from these CA's. So because Chrome trusts a bundle of CA's and the site you are browsing has a certificate that is signed by one of those CA's, you don't have to worry about TLS. How different that is on a private network.","title":"Commercial CA's"},{"location":"tech/trust_tls/#rolling-your-own","text":"Trusting a preconfigured commercial CA is no different from trusting a CA that you create yourself. It provides the same level of trust. The difference is that a certificate from your own CA is free, which makes it preferable over commercial CA's. The downside of this is that you have to configure each client to trust your CA. This configuration comes at a cost as well. That is when you should evaluate trust itself. Is there a change that a client can connect to an unverified server? If so, make the investment of configuring each client with your CA. If not, then you are better off with turning host verification off in your TLS connections. It delegates trust to your known network and leaves you with encryption. No more, no less.","title":"Rolling your own"},{"location":"tech/trust_tls/#but-my-browser-says","text":"When you decide that servers are known and that host verfication has no added value in your particular context, there is still your browser that screams bloody murder. That is because TLS host verfication was designed for the internet with non-technical users in mind. Just click OK and know that your connection is encrypted and safe.","title":"But my browser says"}]}